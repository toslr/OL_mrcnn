:py:mod:`mrcnn.utils`
=====================

.. py:module:: mrcnn.utils

.. autoapi-nested-parse::

   Mask R-CNN
   Common utility functions and classes.

   Copyright (c) 2017 Matterport, Inc.
   Licensed under the MIT License (see LICENSE for details)
   Written by Waleed Abdulla



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mrcnn.utils.Dataset



Functions
~~~~~~~~~

.. autoapisummary::

   mrcnn.utils.extract_bboxes
   mrcnn.utils.compute_iou
   mrcnn.utils.compute_overlaps
   mrcnn.utils.compute_overlaps_masks
   mrcnn.utils.non_max_suppression
   mrcnn.utils.apply_box_deltas
   mrcnn.utils.box_refinement_graph
   mrcnn.utils.box_refinement
   mrcnn.utils.resize_image
   mrcnn.utils.resize_mask
   mrcnn.utils.minimize_mask
   mrcnn.utils.expand_mask
   mrcnn.utils.mold_mask
   mrcnn.utils.unmold_mask
   mrcnn.utils.generate_anchors
   mrcnn.utils.generate_pyramid_anchors
   mrcnn.utils.trim_zeros
   mrcnn.utils.compute_matches
   mrcnn.utils.compute_ap
   mrcnn.utils.compute_ap_range
   mrcnn.utils.compute_recall
   mrcnn.utils.batch_slice
   mrcnn.utils.download_trained_weights
   mrcnn.utils.norm_boxes
   mrcnn.utils.denorm_boxes
   mrcnn.utils.resize
   mrcnn.utils.get_iou
   mrcnn.utils.gt_pred_lists
   mrcnn.utils.get_new_fig
   mrcnn.utils.configcell_text_and_colors
   mrcnn.utils.insert_totals
   mrcnn.utils.pretty_plot_confusion_matrix
   mrcnn.utils.plot_confusion_matrix_from_data



Attributes
~~~~~~~~~~

.. autoapisummary::

   mrcnn.utils.COCO_MODEL_URL


.. py:data:: COCO_MODEL_URL
   :value: 'https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5'

   

.. py:function:: extract_bboxes(mask)

   Compute bounding boxes from masks.
   mask: [height, width, num_instances]. Mask pixels are either 1 or 0.

   Returns: bbox array [num_instances, (y1, x1, y2, x2)].


.. py:function:: compute_iou(box, boxes, box_area, boxes_area)

   Calculates IoU of the given box with the array of the given boxes.
   box: 1D vector [y1, x1, y2, x2]
   boxes: [boxes_count, (y1, x1, y2, x2)]
   box_area: float. the area of 'box'
   boxes_area: array of length boxes_count.

   Note: the areas are passed in rather than calculated here for
   efficiency. Calculate once in the caller to avoid duplicate work.


.. py:function:: compute_overlaps(boxes1, boxes2)

   Computes IoU overlaps between two sets of boxes.
   boxes1, boxes2: [N, (y1, x1, y2, x2)].

   For better performance, pass the largest set first and the smaller second.


.. py:function:: compute_overlaps_masks(masks1, masks2)

   Computes IoU overlaps between two sets of masks.
   masks1, masks2: [Height, Width, instances]


.. py:function:: non_max_suppression(boxes, scores, threshold)

   Performs non-maximum suppression and returns indices of kept boxes.
   boxes: [N, (y1, x1, y2, x2)]. Notice that (y2, x2) lays outside the box.
   scores: 1-D array of box scores.
   threshold: Float. IoU threshold to use for filtering.


.. py:function:: apply_box_deltas(boxes, deltas)

   Applies the given deltas to the given boxes.
   boxes: [N, (y1, x1, y2, x2)]. Note that (y2, x2) is outside the box.
   deltas: [N, (dy, dx, log(dh), log(dw))]


.. py:function:: box_refinement_graph(box, gt_box)

   Compute refinement needed to transform box to gt_box.
   box and gt_box are [N, (y1, x1, y2, x2)]


.. py:function:: box_refinement(box, gt_box)

   Compute refinement needed to transform box to gt_box.
   box and gt_box are [N, (y1, x1, y2, x2)]. (y2, x2) is
   assumed to be outside the box.


.. py:class:: Dataset(class_map=None)


   Bases: :py:obj:`object`

   The base class for dataset classes.
   To use it, create a new class that adds functions specific to the dataset
   you want to use. For example:

   class CatsAndDogsDataset(Dataset):
       def load_cats_and_dogs(self):
           ...
       def load_mask(self, image_id):
           ...
       def image_reference(self, image_id):
           ...

   See COCODataset and ShapesDataset as examples.

   .. py:property:: image_ids


   .. py:method:: add_class(source, class_id, class_name)


   .. py:method:: add_image(source, image_id, path, **kwargs)


   .. py:method:: image_reference(image_id)

      Return a link to the image in its source Website or details about
      the image that help looking it up or debugging it.

      Override for your dataset, but pass to this function
      if you encounter images not in your dataset.


   .. py:method:: prepare(class_map=None)

      Prepares the Dataset class for use.

      TODO: class map is not supported yet. When done, it should handle mapping
            classes from different datasets to the same class ID.


   .. py:method:: map_source_class_id(source_class_id)

      Takes a source class ID and returns the int class ID assigned to it.

      For example:
      dataset.map_source_class_id("coco.12") -> 23


   .. py:method:: get_source_class_id(class_id, source)

      Map an internal class ID to the corresponding class ID in the source dataset.


   .. py:method:: source_image_link(image_id)

      Returns the path or URL to the image.
      Override this to return a URL to the image if it's available online for easy
      debugging.


   .. py:method:: load_image(image_id)

      Load the specified image and return a [H,W,3] Numpy array.
              


   .. py:method:: load_mask(image_id)

      Load instance masks for the given image.
      Different datasets use different ways to store masks. Override this
      method to load instance masks and return them in the form of am
      array of binary masks of shape [height, width, instances].

      Returns:
          masks: A bool array of shape [height, width, instance count] with
              a binary mask per instance.
          class_ids: a 1D array of class IDs of the instance masks.



.. py:function:: resize_image(image, min_dim=None, max_dim=None, min_scale=None, mode='square')

   Resizes an image keeping the aspect ratio unchanged.

   min_dim: if provided, resizes the image such that it's smaller
       dimension == min_dim
   max_dim: if provided, ensures that the image longest side doesn't
       exceed this value.
   min_scale: if provided, ensure that the image is scaled up by at least
       this percent even if min_dim doesn't require it.
   mode: Resizing mode.
       none: No resizing. Return the image unchanged.
       square: Resize and pad with zeros to get a square image
           of size [max_dim, max_dim].
       pad64: Pads width and height with zeros to make them multiples of 64.
              If min_dim or min_scale are provided, it scales the image up
              before padding. max_dim is ignored in this mode.
              The multiple of 64 is needed to ensure smooth scaling of feature
              maps up and down the 6 levels of the FPN pyramid (2**6=64).
       crop: Picks random crops from the image. First, scales the image based
             on min_dim and min_scale, then picks a random crop of
             size min_dim x min_dim. Can be used in training only.
             max_dim is not used in this mode.

   Returns:
   image: the resized image
   window: (y1, x1, y2, x2). If max_dim is provided, padding might
       be inserted in the returned image. If so, this window is the
       coordinates of the image part of the full image (excluding
       the padding). The x2, y2 pixels are not included.
   scale: The scale factor used to resize the image
   padding: Padding added to the image [(top, bottom), (left, right), (0, 0)]


.. py:function:: resize_mask(mask, scale, padding, crop=None)

   Resizes a mask using the given scale and padding.
   Typically, you get the scale and padding from resize_image() to
   ensure both, the image and the mask, are resized consistently.

   scale: mask scaling factor
   padding: Padding to add to the mask in the form
           [(top, bottom), (left, right), (0, 0)]


.. py:function:: minimize_mask(bbox, mask, mini_shape)

   Resize masks to a smaller version to reduce memory load.
   Mini-masks can be resized back to image scale using expand_masks()

   See inspect_data.ipynb notebook for more details.


.. py:function:: expand_mask(bbox, mini_mask, image_shape)

   Resizes mini masks back to image size. Reverses the change
   of minimize_mask().

   See inspect_data.ipynb notebook for more details.


.. py:function:: mold_mask(mask, config)


.. py:function:: unmold_mask(mask, bbox, image_shape)

   Converts a mask generated by the neural network to a format similar
   to its original shape.
   mask: [height, width] of type float. A small, typically 28x28 mask.
   bbox: [y1, x1, y2, x2]. The box to fit the mask in.

   Returns a binary mask with the same size as the original image.


.. py:function:: generate_anchors(scales, ratios, shape, feature_stride, anchor_stride)

   scales: 1D array of anchor sizes in pixels. Example: [32, 64, 128]
   ratios: 1D array of anchor ratios of width/height. Example: [0.5, 1, 2]
   shape: [height, width] spatial shape of the feature map over which
           to generate anchors.
   feature_stride: Stride of the feature map relative to the image in pixels.
   anchor_stride: Stride of anchors on the feature map. For example, if the
       value is 2 then generate anchors for every other feature map pixel.


.. py:function:: generate_pyramid_anchors(scales, ratios, feature_shapes, feature_strides, anchor_stride)

   Generate anchors at different levels of a feature pyramid. Each scale
   is associated with a level of the pyramid, but each ratio is used in
   all levels of the pyramid.

   Returns:
   anchors: [N, (y1, x1, y2, x2)]. All generated anchors in one array. Sorted
       with the same order of the given scales. So, anchors of scale[0] come
       first, then anchors of scale[1], and so on.


.. py:function:: trim_zeros(x)

   It's common to have tensors larger than the available data and
   pad with zeros. This function removes rows that are all zeros.

   x: [rows, columns].


.. py:function:: compute_matches(gt_boxes, gt_class_ids, gt_masks, pred_boxes, pred_class_ids, pred_scores, pred_masks, iou_threshold=0.5, score_threshold=0.0)

   Finds matches between prediction and ground truth instances.

   Returns:
       gt_match: 1-D array. For each GT box it has the index of the matched
                 predicted box.
       pred_match: 1-D array. For each predicted box, it has the index of
                   the matched ground truth box.
       overlaps: [pred_boxes, gt_boxes] IoU overlaps.


.. py:function:: compute_ap(gt_boxes, gt_class_ids, gt_masks, pred_boxes, pred_class_ids, pred_scores, pred_masks, iou_threshold=0.5)

   Compute Average Precision at a set IoU threshold (default 0.5).

   Returns:
   mAP: Mean Average Precision
   precisions: List of precisions at different class score thresholds.
   recalls: List of recall values at different class score thresholds.
   overlaps: [pred_boxes, gt_boxes] IoU overlaps.


.. py:function:: compute_ap_range(gt_box, gt_class_id, gt_mask, pred_box, pred_class_id, pred_score, pred_mask, iou_thresholds=None, verbose=1)

   Compute AP over a range or IoU thresholds. Default range is 0.5-0.95.


.. py:function:: compute_recall(pred_boxes, gt_boxes, iou)

   Compute the recall at the given IoU threshold. It's an indication
   of how many GT boxes were found by the given prediction boxes.

   pred_boxes: [N, (y1, x1, y2, x2)] in image coordinates
   gt_boxes: [N, (y1, x1, y2, x2)] in image coordinates


.. py:function:: batch_slice(inputs, graph_fn, batch_size, names=None)

   Splits inputs into slices and feeds each slice to a copy of the given
   computation graph and then combines the results. It allows you to run a
   graph on a batch of inputs even if the graph is written to support one
   instance only.

   inputs: list of tensors. All must have the same first dimension length
   graph_fn: A function that returns a TF tensor that's part of a graph.
   batch_size: number of slices to divide the data into.
   names: If provided, assigns names to the resulting tensors.


.. py:function:: download_trained_weights(coco_model_path, verbose=1)

   Download COCO trained weights from Releases.

   coco_model_path: local path of COCO trained weights


.. py:function:: norm_boxes(boxes, shape)

   Converts boxes from pixel coordinates to normalized coordinates.
   boxes: [N, (y1, x1, y2, x2)] in pixel coordinates
   shape: [..., (height, width)] in pixels

   Note: In pixel coordinates (y2, x2) is outside the box. But in normalized
   coordinates it's inside the box.

   Returns:
       [N, (y1, x1, y2, x2)] in normalized coordinates


.. py:function:: denorm_boxes(boxes, shape)

   Converts boxes from normalized coordinates to pixel coordinates.
   boxes: [N, (y1, x1, y2, x2)] in normalized coordinates
   shape: [..., (height, width)] in pixels

   Note: In pixel coordinates (y2, x2) is outside the box. But in normalized
   coordinates it's inside the box.

   Returns:
       [N, (y1, x1, y2, x2)] in pixel coordinates


.. py:function:: resize(image, output_shape, order=1, mode='constant', cval=0, clip=True, preserve_range=False, anti_aliasing=False, anti_aliasing_sigma=None)

   A wrapper for Scikit-Image resize().

   Scikit-Image generates warnings on every call to resize() if it doesn't
   receive the right parameters. The right parameters depend on the version
   of skimage. This solves the problem by using different parameters per
   version. And it provides a central place to control resizing defaults.


.. py:function:: get_iou(a, b, epsilon=1e-05)

   Given two boxes `a` and `b` defined as a list of four numbers:
           [x1,y1,x2,y2]
       where:
           x1,y1 represent the upper left corner
           x2,y2 represent the lower right corner
       It returns the Intersect of Union score for these two boxes.

   Args: 
       a:          (list of 4 numbers) [x1,y1,x2,y2]
       b:          (list of 4 numbers) [x1,y1,x2,y2]
       epsilon:    (float) Small value to prevent division by zero

   Returns:
       (float) The Intersect of Union score.


.. py:function:: gt_pred_lists(gt_class_ids, gt_bboxes, pred_class_ids, pred_bboxes, iou_tresh=0.5)

   Given a list of ground truth and predicted classes and their boxes, 
   this function associates the predicted classes to their gt classes using a given Iou (Iou>= 0.5 for example) and returns 
   two normalized lists of len = N containing the gt and predicted classes, 
   filling the non-predicted and miss-predicted classes by the background class (index 0).

   Args    :
       gt_class_ids   :    list of gt classes of size N1
       pred_class_ids :    list of predicted classes of size N2
       gt_bboxes      :    list of gt boxes [N1, (x1, y1, x2, y2)]
       pred_bboxes    :    list of pred boxes [N2, (x1, y1, x2, y2)]
       
   Returns : 
       gt             :    list of size N
       pred           :    list of size N 



.. py:function:: get_new_fig(fn, figsize=[9, 9])

   Init graphics 


.. py:function:: configcell_text_and_colors(array_df, lin, col, oText, facecolors, posi, fz, fmt, show_null_values=0)

   config cell text and colors
   and return text elements to add and to dell
   @TODO: use fmt


.. py:function:: insert_totals(df_cm)

   insert total column and line (the last ones) 


.. py:function:: pretty_plot_confusion_matrix(df_cm, annot=True, cmap='Oranges', fmt='.2f', fz=11, lw=0.5, cbar=False, figsize=[8, 8], show_null_values=0, pred_val_axis='y')

   print conf matrix with default layout (like matlab)
   params:
     df_cm          dataframe (pandas) without totals
     annot          print text in each cell
     cmap           Oranges,Oranges_r,YlGnBu,Blues,RdBu, ... see:
     fz             fontsize
     lw             linewidth
     pred_val_axis  where to show the prediction values (x or y axis)
                     'col' or 'x': show predicted values in columns (x axis) instead lines
                     'lin' or 'y': show predicted values in lines   (y axis)


.. py:function:: plot_confusion_matrix_from_data(y_test, predictions, columns=None, annot=True, cmap='Oranges', fmt='.2f', fz=11, lw=0.5, cbar=False, figsize=[36, 36], show_null_values=0, pred_val_axis='lin')

   plot confusion matrix function with y_test (actual values) and predictions (predic),
   whitout a confusion matrix yet
   return the tp, fp and fn


