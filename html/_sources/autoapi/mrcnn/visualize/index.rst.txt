:py:mod:`mrcnn.visualize`
=========================

.. py:module:: mrcnn.visualize

.. autoapi-nested-parse::

   Mask R-CNN
   Display and Visualization Functions.

   Copyright (c) 2017 Matterport, Inc.
   Licensed under the MIT License (see LICENSE for details)
   Written by Waleed Abdulla



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   mrcnn.visualize.display_images
   mrcnn.visualize.random_colors
   mrcnn.visualize.apply_mask
   mrcnn.visualize.display_instances
   mrcnn.visualize.display_differences
   mrcnn.visualize.draw_rois
   mrcnn.visualize.draw_box
   mrcnn.visualize.display_top_masks
   mrcnn.visualize.plot_precision_recall
   mrcnn.visualize.plot_overlaps
   mrcnn.visualize.draw_boxes
   mrcnn.visualize.display_table
   mrcnn.visualize.display_weight_stats



Attributes
~~~~~~~~~~

.. autoapisummary::

   mrcnn.visualize.ROOT_DIR


.. py:data:: ROOT_DIR

   

.. py:function:: display_images(images, titles=None, cols=4, cmap=None, norm=None, interpolation=None)

   Display the given set of images, optionally with titles.
   images: list or array of image tensors in HWC format.
   titles: optional. A list of titles to display with each image.
   cols: number of images per row
   cmap: Optional. Color map to use. For example, "Blues".
   norm: Optional. A Normalize instance to map values to colors.
   interpolation: Optional. Image interpolation to use for display.


.. py:function:: random_colors(N, bright=True)

   Generate random colors.
   To get visually distinct colors, generate them in HSV space then
   convert to RGB.


.. py:function:: apply_mask(image, mask, color, alpha=0.5)

   Apply the given mask to the image.
       


.. py:function:: display_instances(image, boxes, masks, class_ids, class_names, scores=None, title='', figsize=(16, 16), figAx=None, show_mask=True, show_bbox=True, show_caption=True, colors=None, captions=None, save_fig=None)

   boxes: [num_instance, (y1, x1, y2, x2, class_id)] in image coordinates.
   masks: [height, width, num_instances]
   class_ids: [num_instances]
   class_names: list of class names of the dataset
   scores: (optional) confidence scores for each box
   title: (optional) Figure title
   show_mask, show_bbox: To show masks and bounding boxes or not
   figsize: (optional) the size of the image
   colors: (optional) An array or colors to use with each object
   captions: (optional) A list of strings to use as captions for each object


.. py:function:: display_differences(image, gt_box, gt_class_id, gt_mask, pred_box, pred_class_id, pred_score, pred_mask, class_names, title='', ax=None, show_mask=True, show_box=True, iou_threshold=0.5, score_threshold=0.5)

   Display ground truth and prediction instances on the same image.


.. py:function:: draw_rois(image, rois, refined_rois, mask, class_ids, class_names, limit=10)

   anchors: [n, (y1, x1, y2, x2)] list of anchors in image coordinates.
   proposals: [n, 4] the same anchors but refined to fit objects better.


.. py:function:: draw_box(image, box, color)

   Draw 3-pixel width bounding boxes on the given image array.
   color: list of 3 int values for RGB.


.. py:function:: display_top_masks(image, mask, class_ids, class_names, limit=4)

   Display the given image and the top few class masks.


.. py:function:: plot_precision_recall(AP, precisions, recalls)

   Draw the precision-recall curve.

   AP: Average precision at IoU >= 0.5
   precisions: list of precision values
   recalls: list of recall values


.. py:function:: plot_overlaps(gt_class_ids, pred_class_ids, pred_scores, overlaps, class_names, threshold=0.5)

   Draw a grid showing how ground truth objects are classified.
   gt_class_ids: [N] int. Ground truth class IDs
   pred_class_id: [N] int. Predicted class IDs
   pred_scores: [N] float. The probability scores of predicted classes
   overlaps: [pred_boxes, gt_boxes] IoU overlaps of predictions and GT boxes.
   class_names: list of all class names in the dataset
   threshold: Float. The prediction probability required to predict a class


.. py:function:: draw_boxes(image, boxes=None, refined_boxes=None, masks=None, captions=None, visibilities=None, title='', ax=None)

   Draw bounding boxes and segmentation masks with different
   customizations.

   boxes: [N, (y1, x1, y2, x2, class_id)] in image coordinates.
   refined_boxes: Like boxes, but draw with solid lines to show
       that they're the result of refining 'boxes'.
   masks: [N, height, width]
   captions: List of N titles to display on each box
   visibilities: (optional) List of values of 0, 1, or 2. Determine how
       prominent each bounding box should be.
   title: An optional title to show over the image
   ax: (optional) Matplotlib axis to draw on.


.. py:function:: display_table(table)

   Display values in a table format.
   table: an iterable of rows, and each row is an iterable of values.


.. py:function:: display_weight_stats(model)

   Scans all the weights in the model and returns a list of tuples
   that contain stats about each weight.


